; Тут будут макросы ============================================================

; Загрузка числа в порт
			.MACRO 	OUTI			; Это описание макроса. Везде где outi встретится в коде, то заменяется на 
			LDI 	R17,@1 			; этот кусок кода, причем @0,@1 это параметры, они заменятся введенными параметрами
			OUT 	@0,R17 			; макроса. Данный макрос тупо копирует введенное число сначала в регистр R16, а из него 
			.ENDMACRO	

;==========================================================================
; Настройка таймера 2 - Основной таймер для фоновых задач
                .MACRO TIMER2_INIT
                .equ TimerDivider = MainClock/64/1000     ; 1 mS
 
                OUTI TCCR2,1<<CTC2|4<<CS20 ;Установить режим CTC и предделитель =64
                OUTI TCNT2,0               ; Установить начальное значение счётчиков
 
 
                ldi OSRG,low(TimerDivider)
                out OCR2,OSRG              ;Установить значение в регистр сравнения
				.ENDM

;========================================================================================
;USART INIT
			.MACRO	USART_INIT

			OUTI 	UBRRL,low(bauddivider)
			OUTI 	UBRRH,high(bauddivider)
			OUTI 	UCSRA, 0
			OUTI 	UCSRB,(1<<RXEN)|(1<<TXEN)|(1<<RXCIE)|(1<<TXCIE)|(0<<UDRIE)
			OUTI 	UCSRC,(1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1)
			.ENDM
;========================================================================================
;Передача по USART
.MACRO	TX_RUN
		LDI 	R16, (1<<RXEN)|(1<<TXEN)|(1<<RXCIE)|(1<<TXCIE)|(1<<UDRIE)
		OUT 	UCSRB, R16	
	.ENDM
;========================================================================================

;CLEAR_RAM
			.MACRO	CLEAR_RAM
RAM_Flush:	LDI		ZL,Low(SRAM_START)
			LDI		ZH,High(SRAM_START)
			CLR		R16
Flush:		ST 		Z+,R16
			CPI		ZH,High(RAMEND+1)
			BRNE	Flush

			CPI		ZL,Low(RAMEND+1)
			BRNE	Flush
        	.ENDM
;========================================================================================
;Очистка РОН (Регистров Общего Назначения)
	.MACRO	GPRFLUSH
		LDI	ZL, 30  	; +-----------------------+
		CLR	ZH      	; | Очистка РОН (R00-R31) |
		DEC	ZL      	; |                       |
		ST	Z, ZH   	; | [всего 10 байт кода!] |
		BRNE	PC-2	; +-----------------------+
	.ENDM
;========================================================================================		
; Инкрементация (+1) однойбайтной переменной @0 в памяти
; Памятка: портит содержимое регистра TEMP.
	.MACRO	INC8M
		LDS	temp,	@0
		SUBI	temp,	(-1)
		STS	@0,	temp
	.ENDM


; Декрементация (-1) однойбайтной переменной @0 в памяти
; Памятка: портит содержимое регистра TEMP.
	.MACRO	DEC8M
		LDS	temp,	@0
		SUBI	temp,	(1)
		STS	@0,	temp
	.ENDM
		
; Обнуление однобайтной переменной @0 в памяти
; Памятка: портит содержимое регистра TEMP.
	.MACRO	CLR8M
		CLR	temp		; Тут нам нужен ноль...
		STS	@0,	temp	; Ноль в первый байт счетчика в RAM
	.ENDM
;========================================================================================
;XYZ
			.MACRO	LDX
			LDI		XL,low(@0)
			LDI		XH,High(@0)
			.ENDM

			.MACRO	LDY
			LDI		YL,low(@0)
			LDI		YH,High(@0)
			.ENDM

			.MACRO	LDZ
			LDI		ZL,low(@0)
			LDI		ZH,High(@0)
			.ENDM
;========================================================================================			
;Сохранение SREG и R16			
                .MACRO PUSHF
                PUSH    R16
                IN      R16,SREG
                PUSH    R16
                .ENDM
 
 
                .MACRO POPF
                POP     R16
                OUT     SREG,R16
                POP     R16
                .ENDM
;***************************************************************************
;*
;*  Арифметические операции: 16-битные
;*
;***************************************************************************


; Инкрементация (+1) двухбайтной переменной @0 в памяти (по адресу @0 - мл.байт, little-endian)
; Памятка: портит содержимое регистра TEMP.
	.MACRO	INC16M
		LDS	temp,	@0
		SUBI	temp,	(-1)
		STS	@0,	temp

		LDS	temp,	@0+1
		SBCI	temp,	(-1)
		STS	@0+1,	temp
	.ENDM


; Декрементация (-1) двухбайтной переменной @0 в памяти (по адресу @0 - мл.байт, little-endian)
; Памятка: портит содержимое регистра TEMP.
	.MACRO	DEC16M
		LDS	temp,	@0
		SUBI	temp,	(1)
		STS	@0,	temp

		LDS	temp,	@0+1
		SBCI	temp,	(0)
		STS	@0+1,	temp
	.ENDM


; Обнуление двухбайтной переменной @0 в памяти
; Памятка: портит содержимое регистра TEMP.
	.MACRO	CLR16M
		CLR	temp		; Тут нам нужен ноль...
		STS	@0,	temp	; Ноль в первый байт счетчика в RAM
		STS	@0+1,	temp	; Ноль в второй байт счетчика в RAM
	.ENDM
;---------------------------------------------------------------------------


; Арифметическое вычитание 16-битной константы @2 из регистровой пары @0:@1
; (Это эмуляция стандартной 16-битной инструкции, которая есть не во всех МК:  SBIW  YH:YL,0x1234 )
; Пример вызова:  SUBI16  YH,YL,0x1234
	.MACRO	SUBI16			; Start macro definition 
		SUBI	@1, Low(@2)	; Subtract low byte 
		SBCI	@0, High(@2)	; Subtract high byte 
	.ENDM				; End macro definition



;---------------------------------------------------------------------------
